[{"C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\index.js":"1","C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\App.js":"2","C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\reportWebVitals.js":"3","C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\models\\UserObj.js":"4","C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\pages\\HomePage\\HomePage.js":"5","C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\components\\NavBar\\AppNavbar.js":"6","C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\pages\\ProfilePage\\ProfilePage.js":"7","C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\pages\\DatesPage\\DatesPage.js":"8","C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\pages\\UserHomePage\\UserHomePage.js":"9","C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\pages\\LoginPage\\LoginPage.js":"10","C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\components\\Calendar\\Calendar.js":"11","C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\models\\DateObj.js":"12"},{"size":782,"mtime":1610570527293,"results":"13","hashOfConfig":"14"},{"size":1835,"mtime":1610879500947,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":349,"mtime":1610570128270,"results":"17","hashOfConfig":"14"},{"size":439,"mtime":1610879045731,"results":"18","hashOfConfig":"14"},{"size":921,"mtime":1610879325356,"results":"19","hashOfConfig":"14"},{"size":4335,"mtime":1610879193737,"results":"20","hashOfConfig":"14"},{"size":1830,"mtime":1610881646846,"results":"21","hashOfConfig":"14"},{"size":629,"mtime":1610879234234,"results":"22","hashOfConfig":"14"},{"size":2378,"mtime":1610879939170,"results":"23","hashOfConfig":"14"},{"size":787,"mtime":1610540780919,"results":"24","hashOfConfig":"14"},{"size":375,"mtime":1610880505167,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1ve5nfx",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\index.js",[],["53","54"],"C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\App.js",[],"C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\reportWebVitals.js",[],"C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\models\\UserObj.js",[],"C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\pages\\HomePage\\HomePage.js",[],"C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\components\\NavBar\\AppNavbar.js",[],"C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\pages\\ProfilePage\\ProfilePage.js",["55"],"import { useState } from \"react\";\r\nimport './ProfilePage.css';\r\nimport { Button, Container, Form, Jumbotron } from \"react-bootstrap\";\r\nimport AppNavbar from \"../../components/NavBar/AppNavbar\";\r\nimport Parse from 'parse';\r\nimport UserObj from \"../../models/UserObj\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nfunction ProfilePage(props){\r\n\r\n    const {activeUser} = props;\r\n\r\n    const [userEmail,setUserEmail] = useState(activeUser.email);\r\n    const [userFName, setUserFName] = useState(activeUser.fname);\r\n    const [userLName, setUserLName] = useState(activeUser.lname);\r\n    const [userPswd, setUserPswd] = useState(activeUser.pswd);\r\n\r\n    const userName = activeUser.username;\r\n\r\n    const User = new Parse.User();\r\n    const query = new Parse.Query(User);\r\n\r\n    async function UpdateUser() {\r\n        query.get('Atuj4sdpeT').then((user) => {\r\n            // Updates the data we want\r\n            user.set('email', userEmail);\r\n            user.set('password', userPswd);\r\n            user.set('lname', userFName);\r\n            user.set('fname', userLName);\r\n            // Saves the user with the updated data\r\n            user.save().then((response) => {\r\n              if (typeof document !== 'undefined') document.write(`Updated user: ${JSON.stringify(response)}`);\r\n              console.log('Updated user', response);\r\n            }).catch((error) => {\r\n              if (typeof document !== 'undefined') document.write(`Error while updating user: ${JSON.stringify(error)}`);\r\n              console.error('Error while updating user', error);\r\n            });\r\n          });\r\n    }\r\n    \r\n    if (!activeUser) {\r\n        return <Redirect to=\"/\"/>\r\n    }\r\n    \r\n\r\n    return(\r\n        <div className=\"profile-pg\">\r\n            <Jumbotron>\r\n                <Container>\r\n                    <h1>Pure</h1>\r\n                </Container>\r\n            </Jumbotron>\r\n            <Container>\r\n                <AppNavbar activeUser={activeUser} onLogout={handleLogout}/>\r\n                <Form>\r\n                    <Form.Group controlId=\"formBasicUserName\">\r\n                        <Form.Label>User name:</Form.Label>\r\n                        <Form.Control value={userName} type=\"email\" placeholder=\"Enter email\" disabled/>\r\n                        <Form.Text className=\"text-muted\">\r\n                        User name cannot be changed. \r\n                        </Form.Text>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicEmail\">\r\n                        <Form.Label>Email address</Form.Label>\r\n                        <Form.Control value={userEmail} type=\"email\" placeholder=\"Enter email\" onChange={(e) => setUserEmail(e.target.value)} />\r\n                        <Form.Text className=\"text-muted\">\r\n                        Note that if you change your email address you will be logged out.\r\n                        </Form.Text>\r\n                        <Form.Text className=\"text-muted\">\r\n                        We'll never share your email with anyone else.\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicPassword\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control value={userPswd} type=\"password\" placeholder=\"Password\" onChange={(e) => setUserPswd(e.target.value)}/>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicFName\">\r\n                        <Form.Label>First name</Form.Label>\r\n                        <Form.Control value={userFName} type=\"text\" placeholder=\"Enter email\" onChange={(e) => setUserFName(e.target.value)} />\r\n                        <Form.Text className=\"text-muted\">\r\n                        Change your first name.\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicLName\">\r\n                        <Form.Label>Last name</Form.Label>\r\n                        <Form.Control value={userLName} type=\"text\" placeholder=\"Enter email\" onChange={(e) => setUserLName(e.target.value)} />\r\n                        <Form.Text className=\"text-muted\">\r\n                        Change your last name.\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n\r\n                    <Button variant=\"primary\" type=\"button\" onClick={()=> UpdateUser()}>\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfilePage;","C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\pages\\DatesPage\\DatesPage.js",["56","57","58"],"C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\pages\\UserHomePage\\UserHomePage.js",[],"C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\pages\\LoginPage\\LoginPage.js",["59","60","61","62"],"C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\components\\Calendar\\Calendar.js",["63","64"],"import { useState } from \"react\";\r\nimport RCalendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport Hebcal from 'hebcal';\r\n\r\n\r\nfunction Calendar(){\r\n\r\n    const [value, onChange] = useState(new Date());\r\n    // the rest of your code\r\n\r\n    let d = new Date();\r\n\r\n    let year = new Hebcal.HDate(new Date(2014, 0, 1));\r\n    let date = new Date();\r\n    //let heDate = new Hebcal.HDate(new Date(date.getFullYear,date.getMonth, date.getDate));\r\n\r\n    return(\r\n        <div>\r\n            {year.getDate()}\r\n            {year.greg().getMonth()}\r\n            <RCalendar\r\n            onChange={onChange}\r\n            value={value}\r\n            calendarType={\"Hebrew\"}\r\n            locale ={\"he-He\"}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Calendar;","C:\\Users\\barjan\\Desktop\\front-end\\pure\\src\\models\\DateObj.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":6,"column":8,"nodeType":"71","messageId":"72","endLine":6,"endColumn":15},{"ruleId":"69","severity":1,"message":"73","line":1,"column":21,"nodeType":"71","messageId":"72","endLine":1,"endColumn":30},{"ruleId":"69","severity":1,"message":"74","line":2,"column":8,"nodeType":"71","messageId":"72","endLine":2,"endColumn":17},{"ruleId":"75","severity":1,"message":"76","line":21,"column":7,"nodeType":"77","endLine":21,"endColumn":9,"suggestions":"78"},{"ruleId":"69","severity":1,"message":"73","line":3,"column":35,"nodeType":"71","messageId":"72","endLine":3,"endColumn":44},{"ruleId":"69","severity":1,"message":"74","line":4,"column":8,"nodeType":"71","messageId":"72","endLine":4,"endColumn":17},{"ruleId":"69","severity":1,"message":"79","line":12,"column":12,"nodeType":"71","messageId":"72","endLine":12,"endColumn":22},{"ruleId":"69","severity":1,"message":"80","line":12,"column":33,"nodeType":"71","messageId":"72","endLine":12,"endColumn":41},{"ruleId":"69","severity":1,"message":"81","line":12,"column":9,"nodeType":"71","messageId":"72","endLine":12,"endColumn":10},{"ruleId":"69","severity":1,"message":"82","line":15,"column":9,"nodeType":"71","messageId":"72","endLine":15,"endColumn":13},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'UserObj' is defined but never used.","Identifier","unusedVar","'Jumbotron' is defined but never used.","'AppNavbar' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'readDates'. Either include it or remove the dependency array.","ArrayExpression",["85"],"'activeUser' is assigned a value but never used.","'onLogout' is assigned a value but never used.","'d' is assigned a value but never used.","'date' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [readDates]",{"range":"88","text":"89"},[566,568],"[readDates]"]